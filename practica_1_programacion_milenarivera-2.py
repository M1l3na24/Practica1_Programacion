# -*- coding: utf-8 -*-
"""Practica_1_Programacion_MilenaRivera.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1svoTa6yIVfGaU1Y97KAxJDA2SdI0b8C2
"""

# Esta es la practica 1 de mi clase de programacion. La practica consiste en
# crear un programa en Python 3 que, dada una cadena que solo contiene
# caracteres ‘(’ y ‘)’, pueda determinar si la cadena representa una secuencia
# de paréntesis bien formados.

# Una cadena de parentesis bien formados es aquella en la que cada parentesis
# de apertura ‘(’ tiene un parentesis de cierre correspondiente ‘)’, y estos
# ocurren en el orden correcto sin ningun par desparejado.


# Variables
alfabeto =['(',')']

#Funciones
def verificar_ser_parentesis(S):
  '''Esta es una funcion que recibira la cadena de caracteres del usuario,
  lo primero que hara sera recorrerla elemento por elemento para verificar que
  en efecto cada caracter sea un parentesis. Pero si es una letra, numero o
  cualquiero otro caracter distinto a un parentesis avisara que la cadena no
  esta bien escrita y devolvera un booleano: False. Para el caso especifico
  del vacio o espacio vacio devolvera un False. En caso contrario, sera un
  True.'''

  #Considero el caso donde esta vacia la secuencia
  if len(S) == 0:
    print('El espacio vacío es un caracter que se ingora y no es parentesis.')
    return False

  #Recorro la cadena para verificar que sean parentesis
  for i in S:
    if i not in alfabeto: # si el elemento no esta en el alfabeto regreso False
      print('La secuencia de caracteres solo debe contener parentesis.')
      return False
  print('Todos los elementos de la cadena son parentesis.')
  return True

def pila_secuencia(S):
  '''Esta función recibira la secuencia de caracteres que ya fue evaluada
  y la transformara en un pila. Al mismo tiempo ira emparejando los parentesis,
  si es '(' lo apila y si es ')' lo empareja eliminando un '(' de la pila.
  Devuelve un True si al final la pila queda vacia con todos los parentesis
  emparejados, de lo contrario es False.'''

  pila_de_parentesis = [] #aqui guardare parentesis '('

# Hay que tranformar la entrada en una pila y al mismo tiempo ir emparejando
# parentesis
  for x in S:
    if x == alfabeto[0]:
      pila_de_parentesis.append(x)
    elif x == alfabeto[1]:
      # Necesitamos considerar el caso donde haya más ')' que '('
      # 'if not' funciona para verivicar si aun hay elementos en la pila
      if not pila_de_parentesis:
        print('Se encontro un ")" sin un correspondiente "(".')
        return False
      pila_de_parentesis.pop()

  #Ahora el caso donde haya mas '(' que ')'
  if pila_de_parentesis:
    print('Se encontro un "(" sin un correspondiente ")".')
    return False

  return True #si en efecto se queda vacia se vuelve True

def evaluador_secuencia_bien_formada (pila_de_S):
  '''Esta función recibira la pila, si esta contiene aun elementos significa
  que la cadena de parentesis no estaba bien formada. En caso contrario, (si la
  pila esta vacia), significa que todo parentesis fue emparejado y la secuencia
  estaba bien formada. Devuelve un True para secuencias bien formadas y un
  False para secuencias mal formadas.'''

  if pila_de_S: #True porque esta vacia
    print('La secuencia de parentesis esta bien formada.')
    return True

  else: #else contempla el otro caso donde no esta vacia
    print('La secuencia de parentesis no esta bien formada.')
    return False

def main():
  '''Esta es la funcion principal que funciona como evaluador de secuencias de
  caracteres para ver si contienen parentesis bien formados. Cabe mencionar,
  que ignora (elimina) espacios si existen en la secuencia ingresada para
  evitar errores en las funciones que llama.'''


  while True:
    #recibo la secuencia
    secuencia = input('Introduce una secuencia de parentesis: ')

    #Lo primero es eliminar los espacios si es que existen.
    secuencia = secuencia.replace(' ','')

    #llamo a la función que verifica que cada caracter sea parentesis.
    if not verificar_ser_parentesis(secuencia): #busca el False
      continue #Pedir secuencias hasta que sean correctas.

    #llamo a la funcion que devuelve una pila vacia o no vacia (emparejamiento)
    if pila_secuencia(secuencia): #busca True
      print('La secuencia de parentesis esta bien formada.')
    else: #busca False
      print('La secuencia de parentesis no esta bien formada.')

    pregunta_otra_secuencia = input(
                                "¿Quieres introducir otra secuencia? (s/n): ")
    # .lower() convierte en minúscula la entrada, para minimizar errores
    if pregunta_otra_secuencia.lower() != 's': #respuesta distinta a si
      # termina el bucle si ya no quieres dar otra secuencia o introdujiste
      # un caracter distinto a 's' o a 'n'
      print('Se asume que ya no quieres introducir otra secuencia.')
      break


if __name__ == "__main__":
  main()